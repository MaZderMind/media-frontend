#!/usr/bin/env ruby

unless defined? LOADED_DEFAULT_CONFIG
  LOADED_DEFAULT_CONFIG = true
  require 'compass'
  Compass.add_project_configuration 'config.rb'
end

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

compile '/browse/*' do
  if item[:layout].present?
    layout item[:layout]
  else
    nil
  end
end

# /
compile '*' do
  unless item.binary?
    case item[:extension]
    when /scss/
      filter :sass, Compass.sass_engine_options
    when 'haml'
      filter :haml, { :ugly => true, autoclose: ['<source>'], format: :xhtml }
      layout 'default'
    else
      nil
    end
  end
end

#
# Routes
#

# Assets
route '/assets/**/_*' do
  # _mixed.scss
  nil
end

route '/assets/css/*/' do
  if item[:extension] == 'scss'
    item.identifier.chop + '.css' 
  else
    item.identifier.chop
  end
end

passthrough '/assets/*'
passthrough '/images/*'

# AR datasource
route '/browse/*' do
  if item[:layout] == 'browse-show-page'
    item.identifier.chop + '.' + 'html'
  elsif item[:layout] == 'browse-show-tags'
    item.identifier.chop + '.' + 'html'
  elsif item[:extension] == 'xml'
    # podcast.xml
    item.identifier.chop + '.' + item[:extension]
  else
    item.identifier + 'index.html'
  end
end

# Content
route '*' do
  if item.binary?
    item.identifier.chop + '.' + item[:extension]
  elsif %w{/about/}.include? item.identifier
    # HAML pages in root except index.html
    item.identifier.chop + '.html'
  elsif %w{xml rdf atom}.include? item[:extension]
    # atom, xml or rdf feeds
    item.identifier.chop + '.' + item[:extension]
  else
    item.identifier + 'index.html'
  end
end

layout '*', :haml, {:ugly => true, :autoclose => ['<source>', '<audio>', '<video>'], format: :xhtml}
