!!! 5
%html{lang: 'en'}
  %head
    = render '/partials/header'
    %title
      C3TV -
      = h @item[:title]
    %link{href: '/assets/css/mediaelementplayer.min.css', type: 'text/css', rel: 'stylesheet'}
  %body
    = render '/partials/navbar'

    %div.container-fluid

      %h1
        =  h @item[:event].title
      - if @item[:event].subtitle
        %h2
          = h @item[:event].subtitle
      
      %p.persons
        %span.fa{class: @item[:event].persons_icon}
        = @item[:event].persons_text

      %ul.nav.nav-tabs.nav-justified{role: 'tablist', 'data-tabs' => 'tabs'}
        %li.active
          %a{href: '#video', role: 'tab', 'data-toggle' => 'tab'} Video
        %li 
          %a{href: '#audio', role: 'tab', 'data-toggle' => 'tab'} Audio
        %li
          %a{href: '#download', role: 'tab', 'data-toggle' => 'tab'} Download
          
      .tab-content
        #video.tab-pane.active
          - if @item[:video_recordings].present?
            - r = @item[:video_recordings].first
            %video.video{controls: 'controls', poster: h(@item[:event].poster_url), width: aspect_ratio_width, height: aspect_ratio_height}
              - @item[:video_recordings].each do |recording|
                %source{type: recording.mime_type, src: h(recording.url)}
              %object{ width: aspect_ratio_width, height: aspect_ratio_height, type: 'application/x-shockwave-flash', data: '/assets/flashmediaelement.swf' }
                %param{ name: 'allowFullScreen', value: 'true' }
                %param{ name: 'flashvars', value: "controls=true&file=#{flash(@item[:video_recordings])}" }

        #audio.tab-pane
          - if @item[:audio_recordings].present?
            %audio.audio{controls: 'controls'}
              - @item[:audio_recordings].each do |recording|
                %source{type: recording.mime_type, src: h(recording.url)}

        #download.tab-pane
          %h3 Video
          %ul
            - @item[:video_recordings].each do |recording|
              %li
                -# TODO: move following line to helper
                %span.label.filetype= recording.mime_type.split('/')[1]
                %a{href: recording.url}
                  %span.fa.fa-download
                  http download
                %a{href: recording.torrent_url}
                  %span.fa.fa-download
                  torrent
          
          %h3 Audio
          %ul
            - @item[:audio_recordings].each do |recording|
              %li
                -# TODO: move following line to helper
                .label.filetype= recording.mime_type.split('/')[1]
                %a{href: recording.url}
                  %span.fa.fa-download
                  http download
                %a{href: recording.torrent_url}
                  %span.fa.fa-download
                  torrent
          
          %h3 Parent directory
          %a{href: @item[:conference].recordings_url}
            %span.fa.fa-folder-open
            = @item[:conference].recordings_path

      %ul.metadata
        %li
          %span.fa.fa-clock-o
          = recording_length(@item[:event].recordings.downloaded)
        %li
          %span.fa.fa-calendar-o
          = date(@item[:event])
        %li
          %span.fa.fa-eye
          = @item[:event].view_count
        %li
          %span.fa.fa-external-link
          %a{href: @item[:event].link}
            = URI.parse(@item[:event].link).host

      - if @item[:event].description.present?
        %h3 About
        %p.description
          = @item[:event].description

      - if @item[:event].tags.present?
        %h3 Tags
        - @item[:event].tags.each do |tag|
          -# TODO: move generation of this link out of view
          %a.label.label-default(href="/browse/tags/#{tag.strip}.html")
            = tag
          
      

    = render '/partials/footer'

    %script(src='/assets/js/jquery.min.js')
    %script(src='/assets/js/bootstrap.min.js')
    %script(src='/assets/js/mediaelement-and-player.min.js')

    :javascript
      $('video').mediaelementplayer({
        usePluginFullScreen: true,

        pluginPath: '/assets/',
        enableAutosize: true,
        success: function (mediaElement) {
          mediaElement.addEventListener('playing', function () {
            $.post("http://api.media.ccc.de/public/recordings/count", {event_id: #{@item[:event].id},src: mediaElement.src});
          }, false);
        }
      });
      $('audio').mediaelementplayer();
